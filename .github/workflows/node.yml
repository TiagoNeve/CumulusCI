# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  pull_request:
    branches: [ "development" ]
    paths:
      - 'force-app/**'

jobs:
  validate-deployment-on-integration-org:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'
      
      - name: 'Checout source code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: 'Read PR Body'
        env:
          PAYLOAD: ${{github.event.pull_request.body}}
      
        run: |
          echo $PAYLOAD > ./pr_body.txt
          node ./parsePR.js
          TESTS=$(cat testsToRun.txt)
          echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
      
      - name: 'Install Salesforce CLI'
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version
      
      - name: 'Installing sfdx git delta'
        run: |
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins
      
      - name: 'Installing java'
        run: sudo apt-get install openjdk-8-jdk
      
      # Install SFDX scanner
      - name: 'Installing SFDX scanner'
        run: sfdx plugins:install @salesforce/sfdx-scanner

        # Get the Integration Org SFDX URL and store it in a text file
      - name: 'Populate auth file with SFDX_URL secret of integration org'
        shell: bash
        run: |
          echo ${{ secrets.SFDX_INTEGRATION_URL}} > ./SFDX_INTEGRATION_URL.txt
        # Authenticate to org using the URL stored in the text file
      - name: 'Authenticate to Integration Org'
        run: sfdx auth:sfdxurl:store -f ./SFDX_INTEGRATION_URL.txt -s -a integration

        # We use SFDX Git Delta to create a directory with only the metadata that has changed, this allows us
        # to deploy only those changes, as opposed to deploying the entire branch. This helps reducing deployment times
      - name: 'Create delta packages for new, modified or deleted metadata'
        run: | 
            mkdir changed-sources
            sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/ 
        # Scan the code in the delta directory by using sfdx scanner. Output the results of the scan in a new file
        # called apexScanResults.sarif
      - name: 'Scan code'
        run: |
            cd changed-sources
            sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance" --outfile 'apexScanResults.sarif'  
            cd ..
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: changed-sources/apexScanResults.sarif

        # We do a check-only depploy and we only run the tests specified in the PR
        # If the env variable does not equal 'all', we know that there is a list of
        # tests that can be run
      - name: 'Check-only deploy delta changes - run specified tests'
        if: ${{ env.APEX_TESTS != 'all' }}
        run: |
              echo ${{env.APEX_TESTS}}
              sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json
        # We do a check-only deploy and we run all tests
      - name: 'Check-only deploy delta changes - run all tests'
        if: ${{ env.APEX_TESTS == 'all' }}
        run: |
              sfdx force:source:deploy -p "changed-sources/force-app" --checkonly --testlevel RunLocalTests  --json
      - name: 'Deploy destructive changes (if any)'
        run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 
